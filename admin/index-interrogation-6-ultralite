	SELECT	'ALTER INDEX ' + QUOTENAME(IX.name) + ' ON ' + QUOTENAME(SI.[schema]) + '.' + QUOTENAME(SI.[table_name]) + ' REBUILD WITH (ONLINE=ON, SORT_IN_TEMPDB=ON)',
			[Table]							= SI.[schema] + '.' + SI.[table_name],
			[Index]							= QUOTENAME(IX.name),
			[Type]							= SI.[Type],
			[Pages]							= ISNULL(REPLACE(CONVERT(VARCHAR(20), (CAST(FR.pages AS MONEY)), 1), '.00', ''), '-'),
			[Page Density | Fragmentation]	= CONVERT(VARCHAR(50), FR.[page_density]) + ' | '+ CONVERT(VARCHAR(50), FR.page_fragmentation),
			[Size (GB)]						= ISNULL(REPLACE(CONVERT(VARCHAR(20), (CAST(SU.[Size] AS MONEY)), 1), '.00', ''), '-')
	FROM sys.indexes AS IX
		INNER JOIN sys.objects AS O 
			ON IX.[object_id] = O.[object_id]
		LEFT OUTER JOIN (		
					SELECT	O.[object_id],
							I.index_id,
							[Type] = CAST(CASE	WHEN I.index_id = 1					THEN 'clustered'
												WHEN I.index_id = 0					THEN 'heap' ELSE 'nonclustered' END + 
											CASE	WHEN I.[ignore_dup_key] <> 0	THEN ', ignore duplicate keys' ELSE '' END +
											CASE	WHEN I.is_unique <> 0			THEN ', unique' ELSE '' END +
											CASE	WHEN I.is_primary_key <> 0		THEN ', primary key' ELSE '' END +
											CASE	WHEN I.has_filter = 1			THEN ', filtered' ELSE '' END +
											CASE	WHEN I.[type] = 6				THEN ', columnstore' ELSE '' END +
											CASE	WHEN FI.[object_id] IS NOT NULL	THEN ', fulltext' ELSE '' END AS VARCHAR(210)),
							table_name = O.[Name],
							[schema] = SC.[Name]
					FROM sys.indexes AS I
						INNER JOIN sys.objects AS O 
							ON O.[object_id] = I.[object_id]
						INNER JOIN sys.schemas AS SC 
							ON O.[SCHEMA_ID] = SC.[SCHEMA_ID]
						LEFT OUTER JOIN sys.fulltext_indexes AS FI 
							ON I.[object_id] = FI.[object_id] 
								AND I.index_id = FI.unique_index_id
					WHERE O.[type] IN ('U','V')) AS SI 
						ON O.[object_id] = SI.[object_id] 
							AND IX.index_id = SI.index_id
			LEFT OUTER JOIN (	
				SELECT	[object_id],
						index_id,
						pages = SUM(page_count),
						page_density = SUM(ROUND(avg_page_space_used_in_percent, 2)),
						page_fragmentation = CASE WHEN MAX(index_type_desc) <> 'HEAP' THEN SUM(ROUND(avg_fragmentation_in_percent, 2)) ELSE NULL END
				FROM sys.dm_db_index_physical_stats(DB_ID(), NULL, NULL , NULL, 'SAMPLED')
				WHERE alloc_unit_type_desc = 'IN_ROW_DATA'
				GROUP BY [object_id], index_id, partition_number) AS FR 
					ON FR.[object_id] = IX.[object_id] 
						AND fr.index_id = ix.index_id
			LEFT OUTER JOIN (
					SELECT	[object_id] = I.[object_id],
							index_id = I.index_id,
							size = ((SUM(S.used_page_count)*8)/1024.0)/1024.0 --GB		
					FROM sys.dm_db_partition_stats AS S
						INNER JOIN sys.indexes AS I 
							ON S.[object_id] = I.[object_id] 
								AND S.index_id = I.index_id
						INNER JOIN sys.objects AS O 
							ON O.[object_id] = I.[object_id]
					WHERE O.[type] IN ('U','V')
						AND S.used_page_count > 0
					GROUP BY I.[object_id], I.index_id) AS SU 
						ON FR.[object_id] = SU.[object_id] 
							AND SU.index_id = FR.index_id
		WHERE O.is_ms_shipped = 0
			AND O.[type] IN ('U','V')
			AND IX.[name] IS NOT NULL
			AND FR.page_fragmentation >= 30
		ORDER BY FR.page_fragmentation DESC, SU.Size DESC;
